name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - 'feature/**'
  pull_request:
    branches:
      - main
      - 'feature/**'

jobs:
  go-lint:
    name: Lint Go Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16

      - name: Install GolangCI-Lint
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

      - name: Run GolangCI-Lint
        run: golangci-lint run ./...

  go-test:
    name: Test Go Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16

      - name: Install dependencies
        run: |
          cd go-gin-example
          go mod tidy

      - name: Run tests
        run: |
          cd go-gin-example
          go test ./...

  go-build-and-push:
    name: Build and Push Go Docker Image
    runs-on: ubuntu-latest
    needs: [go-lint, go-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16

      - name: Install dependencies
        run: |
          cd go-gin-example
          go mod tidy

      - name: Build Docker image
        run: |
          cd go-gin-example
          docker build -t ${{ secrets.DOCKER_USERNAME }}/go-app:latest .

      - name: Push Docker image
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push ${{ secrets.DOCKER_USERNAME }}/go-app:latest

  nextjs-lint-and-type-check:
    name: Lint and Type Check Next.js Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v4.0.0
        with:
          version: 8

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Check types
        run: pnpm type-check

      - name: Check linting
        run: pnpm lint

      - name: Check commit messages
        uses: wagoid/commitlint-github-action@v6

  nextjs-test:
    name: Test Next.js Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v4.0.0
        with:
          version: 8

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Run tests
        run: pnpm test

  nextjs-build-and-push:
    name: Build and Push Next.js Docker Image
    runs-on: ubuntu-latest
    needs: [nextjs-lint-and-type-check, nextjs-test]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build Docker image
        run: |
          cd typescript-nextjs-starter
          docker build -t ${{ secrets.DOCKER_USERNAME }}/nextjs-app:latest .

      - name: Push Docker image
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push ${{ secrets.DOCKER_USERNAME }}/nextjs-app:latest

  wordpress-lint:
    name: Lint WordPress Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install PHP and Composer
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          tools: composer

      - name: Install PHPCS
        run: composer global require "squizlabs/php_codesniffer=*"

      - name: Run PHPCS
        run: ~/.composer/vendor/bin/phpcs --standard=WordPress --ignore=*/vendor/* .

  wordpress-test:
    name: Test WordPress Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install PHP and Composer
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          tools: composer

      - name: Install dependencies
        run: composer install

      - name: Run PHPCS
        run: ~/.composer/vendor/bin/phpcs --standard=WordPress --ignore=*/vendor/* .

      - name: Run tests
        run: |
          ./vendor/bin/phpunit

  wordpress-build-and-push:
    name: Build and Push WordPress Docker Image
    runs-on: ubuntu-latest
    needs: [wordpress-lint, wordpress-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build Docker image
        run: |
          cd wordpress-plugin
          docker build -t ${{ secrets.DOCKER_USERNAME }}/wordpress-app:latest .

      - name: Push Docker image
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push ${{ secrets.DOCKER_USERNAME }}/wordpress-app:latest

  deploy-to-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [go-build-and-push, nextjs-build-and-push, wordpress-build-and-push]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy to Staging Server
        run: |
          ssh ${{ secrets.STAGING_SERVER_USER }}@${{ secrets.STAGING_SERVER_IP }} "docker pull ${{ secrets.DOCKER_USERNAME }}/go-app:latest && docker pull ${{ secrets.DOCKER_USERNAME }}/nextjs-app:latest && docker pull ${{ secrets.DOCKER_USERNAME }}/wordpress-app:latest && docker-compose -f docker-compose.yml up -d"
